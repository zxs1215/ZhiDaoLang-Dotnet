//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:\ZhiDaoLang\ZDLang\ZDLang_Antlr\ZD.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ZDParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, KEY=27, IDENTIFIER=28, WS=29, NUMBER=30;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_importer = 2, RULE_namespace = 3, 
		RULE_class = 4, RULE_property = 5, RULE_valueSentence = 6, RULE_func_call = 7, 
		RULE_sentence = 8, RULE_set_val = 9, RULE_var = 10, RULE_char = 11, RULE_str = 12, 
		RULE_new = 13, RULE_access = 14, RULE_func = 15, RULE_params = 16;
	public static readonly string[] ruleNames = {
		"program", "statement", "importer", "namespace", "class", "property", 
		"valueSentence", "func_call", "sentence", "set_val", "var", "char", "str", 
		"new", "access", "func", "params"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00B7\u5F15'", "'\u300A'", "'-'", "'\u300B'", "'\u00B7\u4E66'", 
		"'\u00B7\u7AE0'", "'\u00B7\u8005'", "'\u00B7\u4E5F'", "'\uFF1B'", "'\u00B7\u4EE5'", 
		"'\uFF08'", "'\uFF0C'", "'\uFF09'", "'\u00B7\u8BBE'", "'\u00B7\u4E3A'", 
		"'\u2018'", "'\u9225\uFFFD'", "'\u2019'", "'\u201C'", "'\u201D'", "'\u00B7\u94B8'", 
		"'\u00B7\u533F'", "'\u00B7\u4F20'", "'\u00B7\u66F0'", "'\u3002'", "'\u00B7\u4ECB'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "KEY", "IDENTIFIER", "WS", "NUMBER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ZD.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ZDParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ZDParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ZDParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 34;
			statement();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext @class() {
			return GetRuleContext<ClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImporterContext[] importer() {
			return GetRuleContexts<ImporterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImporterContext importer(int i) {
			return GetRuleContext<ImporterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessContext[] access() {
			return GetRuleContexts<AccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessContext access(int i) {
			return GetRuleContext<AccessContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 36;
				importer();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 43;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 42;
				@namespace();
				}
				break;
			}
			State = 45;
			@class();
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 46;
				access();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImporterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ZDParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ZDParser.IDENTIFIER, i);
		}
		public ImporterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImporter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImporterContext importer() {
		ImporterContext _localctx = new ImporterContext(Context, State);
		EnterRule(_localctx, 4, RULE_importer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(T__0);
			State = 53;
			Match(T__1);
			State = 54;
			Match(IDENTIFIER);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 55;
				Match(T__2);
				State = 56;
				Match(IDENTIFIER);
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 62;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ZDParser.IDENTIFIER, 0); }
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(T__1);
			State = 65;
			Match(IDENTIFIER);
			State = 66;
			Match(T__4);
			State = 67;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ZDParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext[] func() {
			return GetRuleContexts<FuncContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func(int i) {
			return GetRuleContext<FuncContext>(i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 8, RULE_class);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(T__1);
			State = 70;
			Match(IDENTIFIER);
			State = 71;
			Match(T__5);
			State = 72;
			Match(T__3);
			State = 77;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 75;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						State = 73;
						property();
						}
						break;
					case 2:
						{
						State = 74;
						func();
						}
						break;
					}
					} 
				}
				State = 79;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ZDParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ZDParser.IDENTIFIER, i);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 10, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(IDENTIFIER);
			State = 81;
			Match(T__6);
			State = 82;
			Match(IDENTIFIER);
			State = 83;
			Match(T__7);
			State = 84;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueSentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewContext @new() {
			return GetRuleContext<NewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ZDParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharContext @char() {
			return GetRuleContext<CharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_callContext func_call() {
			return GetRuleContext<Func_callContext>(0);
		}
		public ValueSentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueSentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueSentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueSentenceContext valueSentence() {
		ValueSentenceContext _localctx = new ValueSentenceContext(Context, State);
		EnterRule(_localctx, 12, RULE_valueSentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 86;
				var();
				}
				break;
			case 2:
				{
				State = 87;
				@new();
				}
				break;
			case 3:
				{
				State = 88;
				Match(NUMBER);
				}
				break;
			case 4:
				{
				State = 89;
				@char();
				}
				break;
			case 5:
				{
				State = 90;
				str();
				}
				break;
			case 6:
				{
				State = 91;
				func_call();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ZDParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ZDParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueSentenceContext[] valueSentence() {
			return GetRuleContexts<ValueSentenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueSentenceContext valueSentence(int i) {
			return GetRuleContext<ValueSentenceContext>(i);
		}
		public Func_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_callContext func_call() {
		Func_callContext _localctx = new Func_callContext(Context, State);
		EnterRule(_localctx, 14, RULE_func_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(IDENTIFIER);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 95;
				Match(T__2);
				State = 96;
				Match(IDENTIFIER);
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 102;
			Match(T__9);
			State = 103;
			Match(T__10);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__18) | (1L << T__20) | (1L << IDENTIFIER) | (1L << NUMBER))) != 0)) {
				{
				State = 104;
				valueSentence();
				}
			}

			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 107;
				Match(T__11);
				State = 108;
				valueSentence();
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 114;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_valContext set_val() {
			return GetRuleContext<Set_valContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_callContext func_call() {
			return GetRuleContext<Func_callContext>(0);
		}
		public SentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenceContext sentence() {
		SentenceContext _localctx = new SentenceContext(Context, State);
		EnterRule(_localctx, 16, RULE_sentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				{
				State = 116;
				func_call();
				State = 117;
				Match(T__8);
				}
				}
				break;
			case 2:
				{
				State = 119;
				set_val();
				}
				break;
			case 3:
				{
				State = 120;
				property();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_valContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ZDParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueSentenceContext valueSentence() {
			return GetRuleContext<ValueSentenceContext>(0);
		}
		public Set_valContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_val; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_val(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_valContext set_val() {
		Set_valContext _localctx = new Set_valContext(Context, State);
		EnterRule(_localctx, 18, RULE_set_val);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(T__13);
			State = 124;
			Match(IDENTIFIER);
			State = 125;
			Match(T__14);
			State = 126;
			valueSentence();
			State = 127;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ZDParser.IDENTIFIER, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 20, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharContext : ParserRuleContext {
		public CharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharContext @char() {
		CharContext _localctx = new CharContext(Context, State);
		EnterRule(_localctx, 22, RULE_char);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(T__15);
			State = 133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 132;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==T__16) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 135;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrContext : ParserRuleContext {
		public StrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_str; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrContext str() {
		StrContext _localctx = new StrContext(Context, State);
		EnterRule(_localctx, 24, RULE_str);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(T__18);
			State = 141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 138;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==T__16) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 144;
			Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ZDParser.IDENTIFIER, 0); }
		public NewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewContext @new() {
		NewContext _localctx = new NewContext(Context, State);
		EnterRule(_localctx, 26, RULE_new);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(T__20);
			State = 147;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ZDParser.IDENTIFIER, 0); }
		public AccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessContext access() {
		AccessContext _localctx = new AccessContext(Context, State);
		EnterRule(_localctx, 28, RULE_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(IDENTIFIER);
			State = 150;
			_la = TokenStream.LA(1);
			if ( !(_la==T__21 || _la==T__22) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 151;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ZDParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext[] sentence() {
			return GetRuleContexts<SentenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext sentence(int i) {
			return GetRuleContext<SentenceContext>(i);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 30, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(IDENTIFIER);
			State = 154;
			Match(T__23);
			State = 155;
			@params();
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__13 || _la==IDENTIFIER) {
				{
				{
				State = 156;
				sentence();
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 162;
			Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 32, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__25) {
				{
				{
				State = 164;
				Match(T__25);
				State = 165;
				property();
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ' ', '\xAE', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\a', '\x3', '(', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '+', '\v', '\x3', '\x3', '\x3', '\x5', '\x3', '.', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x32', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\x35', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '<', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '?', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', 'N', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'Q', 
		'\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '_', '\n', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\a', '\t', '\x64', '\n', '\t', '\f', '\t', '\xE', 
		'\t', 'g', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'l', '\n', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'p', '\n', '\t', 
		'\f', '\t', '\xE', '\t', 's', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'|', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\x88', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\a', '\xE', '\x8E', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 
		'\x91', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\xA0', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xA3', '\v', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', '\xA9', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xAC', '\v', 
		'\x12', '\x3', '\x12', '\x3', '\x8F', '\x2', '\x13', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '\x2', '\x4', '\x3', '\x2', '\x13', '\x13', 
		'\x3', '\x2', '\x18', '\x19', '\x2', '\xB0', '\x2', '$', '\x3', '\x2', 
		'\x2', '\x2', '\x4', ')', '\x3', '\x2', '\x2', '\x2', '\x6', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x42', '\x3', '\x2', '\x2', '\x2', '\n', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'R', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'^', '\x3', '\x2', '\x2', '\x2', '\x10', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '{', '\x3', '\x2', '\x2', '\x2', '\x14', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x83', '\x3', '\x2', '\x2', '\x2', '\x18', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x97', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x9B', '\x3', '\x2', '\x2', '\x2', '\"', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\x5', '\x4', '\x3', '\x2', '%', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '&', '(', '\x5', '\x6', '\x4', '\x2', '\'', '&', 
		'\x3', '\x2', '\x2', '\x2', '(', '+', '\x3', '\x2', '\x2', '\x2', ')', 
		'\'', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', 
		'*', '-', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', 
		',', '.', '\x5', '\b', '\x5', '\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x33', '\x5', '\n', '\x6', '\x2', '\x30', '\x32', '\x5', '\x1E', 
		'\x10', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', 
		'\a', '\x3', '\x2', '\x2', '\x37', '\x38', '\a', '\x4', '\x2', '\x2', 
		'\x38', '=', '\a', '\x1E', '\x2', '\x2', '\x39', ':', '\a', '\x5', '\x2', 
		'\x2', ':', '<', '\a', '\x1E', '\x2', '\x2', ';', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '<', '?', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', 
		'\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '@', '\x3', '\x2', 
		'\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', 
		'\x6', '\x2', '\x2', '\x41', '\a', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\a', '\x4', '\x2', '\x2', '\x43', '\x44', '\a', '\x1E', '\x2', 
		'\x2', '\x44', '\x45', '\a', '\a', '\x2', '\x2', '\x45', '\x46', '\a', 
		'\x6', '\x2', '\x2', '\x46', '\t', '\x3', '\x2', '\x2', '\x2', 'G', 'H', 
		'\a', '\x4', '\x2', '\x2', 'H', 'I', '\a', '\x1E', '\x2', '\x2', 'I', 
		'J', '\a', '\b', '\x2', '\x2', 'J', 'O', '\a', '\x6', '\x2', '\x2', 'K', 
		'N', '\x5', '\f', '\a', '\x2', 'L', 'N', '\x5', ' ', '\x11', '\x2', 'M', 
		'K', '\x3', '\x2', '\x2', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\x1E', '\x2', 
		'\x2', 'S', 'T', '\a', '\t', '\x2', '\x2', 'T', 'U', '\a', '\x1E', '\x2', 
		'\x2', 'U', 'V', '\a', '\n', '\x2', '\x2', 'V', 'W', '\a', '\v', '\x2', 
		'\x2', 'W', '\r', '\x3', '\x2', '\x2', '\x2', 'X', '_', '\x5', '\x16', 
		'\f', '\x2', 'Y', '_', '\x5', '\x1C', '\xF', '\x2', 'Z', '_', '\a', ' ', 
		'\x2', '\x2', '[', '_', '\x5', '\x18', '\r', '\x2', '\\', '_', '\x5', 
		'\x1A', '\xE', '\x2', ']', '_', '\x5', '\x10', '\t', '\x2', '^', 'X', 
		'\x3', '\x2', '\x2', '\x2', '^', 'Y', '\x3', '\x2', '\x2', '\x2', '^', 
		'Z', '\x3', '\x2', '\x2', '\x2', '^', '[', '\x3', '\x2', '\x2', '\x2', 
		'^', '\\', '\x3', '\x2', '\x2', '\x2', '^', ']', '\x3', '\x2', '\x2', 
		'\x2', '_', '\xF', '\x3', '\x2', '\x2', '\x2', '`', '\x65', '\a', '\x1E', 
		'\x2', '\x2', '\x61', '\x62', '\a', '\x5', '\x2', '\x2', '\x62', '\x64', 
		'\a', '\x1E', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', 
		'\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'h', 
		'i', '\a', '\f', '\x2', '\x2', 'i', 'k', '\a', '\r', '\x2', '\x2', 'j', 
		'l', '\x5', '\xE', '\b', '\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'q', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\a', '\xE', '\x2', '\x2', 'n', 'p', '\x5', '\xE', '\b', '\x2', 
		'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 's', '\x3', '\x2', '\x2', '\x2', 
		'q', 'o', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 
		'r', 't', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\a', '\xF', '\x2', '\x2', 'u', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\x5', '\x10', '\t', '\x2', 'w', 'x', '\a', '\v', '\x2', 
		'\x2', 'x', '|', '\x3', '\x2', '\x2', '\x2', 'y', '|', '\x5', '\x14', 
		'\v', '\x2', 'z', '|', '\x5', '\f', '\a', '\x2', '{', 'v', '\x3', '\x2', 
		'\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '{', 'z', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x13', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', 
		'\x10', '\x2', '\x2', '~', '\x7F', '\a', '\x1E', '\x2', '\x2', '\x7F', 
		'\x80', '\a', '\x11', '\x2', '\x2', '\x80', '\x81', '\x5', '\xE', '\b', 
		'\x2', '\x81', '\x82', '\a', '\v', '\x2', '\x2', '\x82', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\x1E', '\x2', '\x2', '\x84', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x85', '\x87', '\a', '\x12', '\x2', 
		'\x2', '\x86', '\x88', '\n', '\x2', '\x2', '\x2', '\x87', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\a', '\x14', '\x2', 
		'\x2', '\x8A', '\x19', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8F', '\a', 
		'\x15', '\x2', '\x2', '\x8C', '\x8E', '\n', '\x2', '\x2', '\x2', '\x8D', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x92', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\x16', '\x2', 
		'\x2', '\x93', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', 
		'\x17', '\x2', '\x2', '\x95', '\x96', '\a', '\x1E', '\x2', '\x2', '\x96', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\a', '\x1E', '\x2', 
		'\x2', '\x98', '\x99', '\t', '\x3', '\x2', '\x2', '\x99', '\x9A', '\a', 
		'\v', '\x2', '\x2', '\x9A', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9C', '\a', '\x1E', '\x2', '\x2', '\x9C', '\x9D', '\a', '\x1A', '\x2', 
		'\x2', '\x9D', '\xA1', '\x5', '\"', '\x12', '\x2', '\x9E', '\xA0', '\x5', 
		'\x12', '\n', '\x2', '\x9F', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA5', '\a', '\x1B', '\x2', '\x2', '\xA5', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\a', '\x1C', '\x2', '\x2', '\xA7', '\xA9', '\x5', 
		'\f', '\a', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\x11', 
		')', '-', '\x33', '=', 'M', 'O', '^', '\x65', 'k', 'q', '{', '\x87', '\x8F', 
		'\xA1', '\xAA',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
