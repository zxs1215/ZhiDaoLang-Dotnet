//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:\ZhiDaoLang\ZD_Antlr\ZD.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ZDLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		KEY=10, IDENTIFIER=11, WS=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"KEY", "IDENTIFIER", "WS"
	};


	public ZDLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ZDLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\u5BEE\u66B5\uFFFD'", "'\u9286\uFFFD'", "'\u8DEF\u6D94\uFFFD'", 
		"'\u8DEF\u7ED4\uFFFD'", "'\u9470\u5422\uFFFD'", "'\u6D94\u7189\uFFFD'", 
		"'\u8DEF\u9356\u5938\u7BA3'", "'\u8DEF\u6D7C\u72B1\u7BA3'", "'\u8DEF'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "KEY", "IDENTIFIER", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ZD.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ZDLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xE', '`', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', 'N', '\n', '\v', '\x3', '\f', '\x6', '\f', 'Q', 
		'\n', '\f', '\r', '\f', '\xE', '\f', 'R', '\x3', '\f', '\x6', '\f', 'V', 
		'\n', '\f', '\r', '\f', '\xE', '\f', 'W', '\x3', '\r', '\x6', '\r', '[', 
		'\n', '\r', '\r', '\r', '\xE', '\r', '\\', '\x3', '\r', '\x3', '\r', '\x2', 
		'\x2', '\xE', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', 
		'\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', 
		'\x17', '\r', '\x19', '\xE', '\x3', '\x2', '\x5', '\x3', '\x2', '\x4E02', 
		'\x9FA7', '\x5', '\x2', '/', '/', '\x32', ';', '\x4E02', '\x9FA7', '\x5', 
		'\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x2', '\x66', '\x2', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x5', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\a', '\"', '\x3', '\x2', '\x2', '\x2', '\t', '&', '\x3', '\x2', '\x2', 
		'\x2', '\v', '*', '\x3', '\x2', '\x2', '\x2', '\r', '.', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\x32', '\x3', '\x2', '\x2', '\x2', '\x11', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x13', '<', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x17', 'P', '\x3', '\x2', '\x2', '\x2', 
		'\x19', 'Z', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '\x5BF0', 
		'\x2', '\x2', '\x1C', '\x1D', '\a', '\x66B7', '\x2', '\x2', '\x1D', '\x1E', 
		'\a', '\xFFFF', '\x2', '\x2', '\x1E', '\x4', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', ' ', '\a', '\x9288', '\x2', '\x2', ' ', '!', '\a', '\xFFFF', '\x2', 
		'\x2', '!', '\x6', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', '\x8DF1', 
		'\x2', '\x2', '#', '$', '\a', '\x6D96', '\x2', '\x2', '$', '%', '\a', 
		'\xFFFF', '\x2', '\x2', '%', '\b', '\x3', '\x2', '\x2', '\x2', '&', '\'', 
		'\a', '\x8DF1', '\x2', '\x2', '\'', '(', '\a', '\x7ED6', '\x2', '\x2', 
		'(', ')', '\a', '\xFFFF', '\x2', '\x2', ')', '\n', '\x3', '\x2', '\x2', 
		'\x2', '*', '+', '\a', '\x9472', '\x2', '\x2', '+', ',', '\a', '\x5424', 
		'\x2', '\x2', ',', '-', '\a', '\xFFFF', '\x2', '\x2', '-', '\f', '\x3', 
		'\x2', '\x2', '\x2', '.', '/', '\a', '\x6D96', '\x2', '\x2', '/', '\x30', 
		'\a', '\x718B', '\x2', '\x2', '\x30', '\x31', '\a', '\xFFFF', '\x2', '\x2', 
		'\x31', '\xE', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', '\x8DF1', 
		'\x2', '\x2', '\x33', '\x34', '\a', '\x9358', '\x2', '\x2', '\x34', '\x35', 
		'\a', '\x593A', '\x2', '\x2', '\x35', '\x36', '\a', '\x7BA5', '\x2', '\x2', 
		'\x36', '\x10', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\x8DF1', 
		'\x2', '\x2', '\x38', '\x39', '\a', '\x6D7E', '\x2', '\x2', '\x39', ':', 
		'\a', '\x72B3', '\x2', '\x2', ':', ';', '\a', '\x7BA5', '\x2', '\x2', 
		';', '\x12', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', '\x8DF1', '\x2', 
		'\x2', '=', '\x14', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\x5BF0', 
		'\x2', '\x2', '?', '@', '\a', '\x66B7', '\x2', '\x2', '@', 'N', '\a', 
		'\xFFFF', '\x2', '\x2', '\x41', '\x42', '\a', '\x8DF1', '\x2', '\x2', 
		'\x42', '\x43', '\a', '\x6D96', '\x2', '\x2', '\x43', 'N', '\a', '\xFFFF', 
		'\x2', '\x2', '\x44', '\x45', '\a', '\x8DF1', '\x2', '\x2', '\x45', '\x46', 
		'\a', '\x7ED6', '\x2', '\x2', '\x46', 'N', '\a', '\xFFFF', '\x2', '\x2', 
		'G', 'H', '\a', '\x7483', '\x2', '\x2', 'H', 'I', '\a', '\x97EF', '\x2', 
		'\x2', 'I', 'N', '\a', '\xFFFF', '\x2', '\x2', 'J', 'K', '\a', '\x6D95', 
		'\x2', '\x2', 'K', 'L', '\a', '\x90DF', '\x2', '\x2', 'L', 'N', '\a', 
		'\xFFFF', '\x2', '\x2', 'M', '>', '\x3', '\x2', '\x2', '\x2', 'M', '\x41', 
		'\x3', '\x2', '\x2', '\x2', 'M', '\x44', '\x3', '\x2', '\x2', '\x2', 'M', 
		'G', '\x3', '\x2', '\x2', '\x2', 'M', 'J', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x16', '\x3', '\x2', '\x2', '\x2', 'O', 'Q', '\t', '\x2', '\x2', 
		'\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'U', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\t', '\x3', '\x2', 
		'\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'X', '\x18', '\x3', '\x2', '\x2', '\x2', 'Y', '[', '\t', '\x4', 
		'\x2', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', 
		'\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', 
		'_', '\b', '\r', '\x2', '\x2', '_', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x2', 'M', 'R', 'U', 'W', '\\', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
