//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:\ZhiDaoLang\ZD_Antlr\ZD.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ZDParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		KEY=10, IDENTIFIER=11, WS=12;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_importer = 2, RULE_namespace = 3, 
		RULE_class = 4, RULE_property = 5, RULE_access = 6, RULE_func = 7;
	public static readonly string[] ruleNames = {
		"program", "statement", "importer", "namespace", "class", "property", 
		"access", "func"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u5BEE\u66B5\uFFFD'", "'\u9286\uFFFD'", "'\u8DEF\u6D94\uFFFD'", 
		"'\u8DEF\u7ED4\uFFFD'", "'\u9470\u5422\uFFFD'", "'\u6D94\u7189\uFFFD'", 
		"'\u8DEF\u9356\u5938\u7BA3'", "'\u8DEF\u6D7C\u72B1\u7BA3'", "'\u8DEF'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "KEY", "IDENTIFIER", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ZD.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ZDParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ZDParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ZDParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 16;
			statement();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImporterContext[] importer() {
			return GetRuleContexts<ImporterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImporterContext importer(int i) {
			return GetRuleContext<ImporterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassContext @class() {
			return GetRuleContext<ClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessContext[] access() {
			return GetRuleContexts<AccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessContext access(int i) {
			return GetRuleContext<AccessContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 18;
					importer();
					}
					}
					State = 23;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 24;
					@namespace();
					}
				}

				}
				break;
			case 3:
				{
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 27;
					@class();
					}
				}

				}
				break;
			case 4:
				{
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 30;
					access();
					}
					}
					State = 35;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImporterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ZDParser.IDENTIFIER, 0); }
		public ImporterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImporter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImporterContext importer() {
		ImporterContext _localctx = new ImporterContext(Context, State);
		EnterRule(_localctx, 4, RULE_importer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(T__0);
			State = 39;
			Match(T__1);
			State = 40;
			Match(IDENTIFIER);
			State = 41;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ZDParser.IDENTIFIER, 0); }
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(T__1);
			State = 44;
			Match(IDENTIFIER);
			State = 45;
			Match(T__2);
			State = 46;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ZDParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 8, RULE_class);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(T__1);
			State = 49;
			Match(IDENTIFIER);
			State = 50;
			Match(T__3);
			State = 51;
			Match(T__1);
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 52;
				property();
				}
				break;
			case T__1:
				{
				State = 53;
				func();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ZDParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ZDParser.IDENTIFIER, i);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 10, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(IDENTIFIER);
			State = 57;
			Match(T__4);
			State = 58;
			Match(IDENTIFIER);
			State = 59;
			Match(T__5);
			State = 60;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ZDParser.IDENTIFIER, 0); }
		public AccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessContext access() {
		AccessContext _localctx = new AccessContext(Context, State);
		EnterRule(_localctx, 12, RULE_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(IDENTIFIER);
			State = 63;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 64;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ZDParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ZDParser.IDENTIFIER, i);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IZDVisitor<TResult> typedVisitor = visitor as IZDVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 14, RULE_func);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(T__1);
			State = 67;
			Match(IDENTIFIER);
			State = 68;
			Match(T__8);
			State = 69;
			Match(IDENTIFIER);
			State = 70;
			Match(T__1);
			State = 71;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', 'L', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', 
		'\x3', '\x16', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x19', '\v', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x1C', '\n', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x1F', '\n', '\x3', '\x3', '\x3', '\a', '\x3', '\"', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '%', '\v', '\x3', '\x5', '\x3', '\'', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x39', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x2', '\x2', '\n', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x2', '\x3', '\x3', '\x2', '\t', '\n', '\x2', 'K', '\x2', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '&', '\x3', '\x2', '\x2', '\x2', '\x6', '(', 
		'\x3', '\x2', '\x2', '\x2', '\b', '-', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\f', ':', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '@', '\x3', '\x2', '\x2', '\x2', '\x10', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x13', '\x5', '\x4', '\x3', '\x2', '\x13', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\x5', '\x6', '\x4', '\x2', 
		'\x15', '\x14', '\x3', '\x2', '\x2', '\x2', '\x16', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1C', '\x5', '\b', 
		'\x5', '\x2', '\x1B', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', '\x1F', '\x5', '\n', '\x6', '\x2', '\x1E', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', '\'', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\"', '\x5', '\xE', '\b', '\x2', '!', 
		' ', '\x3', '\x2', '\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', '\x2', 
		'#', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', 
		'$', '\'', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', 
		'\x2', '&', '\x17', '\x3', '\x2', '\x2', '\x2', '&', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x1E', '\x3', '\x2', '\x2', '\x2', '&', '#', '\x3', 
		'\x2', '\x2', '\x2', '\'', '\x5', '\x3', '\x2', '\x2', '\x2', '(', ')', 
		'\a', '\x3', '\x2', '\x2', ')', '*', '\a', '\x4', '\x2', '\x2', '*', '+', 
		'\a', '\r', '\x2', '\x2', '+', ',', '\a', '\x4', '\x2', '\x2', ',', '\a', 
		'\x3', '\x2', '\x2', '\x2', '-', '.', '\a', '\x4', '\x2', '\x2', '.', 
		'/', '\a', '\r', '\x2', '\x2', '/', '\x30', '\a', '\x5', '\x2', '\x2', 
		'\x30', '\x31', '\a', '\x4', '\x2', '\x2', '\x31', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x33', '\a', '\x4', '\x2', '\x2', '\x33', '\x34', 
		'\a', '\r', '\x2', '\x2', '\x34', '\x35', '\a', '\x6', '\x2', '\x2', '\x35', 
		'\x38', '\a', '\x4', '\x2', '\x2', '\x36', '\x39', '\x5', '\f', '\a', 
		'\x2', '\x37', '\x39', '\x5', '\x10', '\t', '\x2', '\x38', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'\v', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\r', '\x2', '\x2', 
		';', '<', '\a', '\a', '\x2', '\x2', '<', '=', '\a', '\r', '\x2', '\x2', 
		'=', '>', '\a', '\b', '\x2', '\x2', '>', '?', '\a', '\x4', '\x2', '\x2', 
		'?', '\r', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '\r', '\x2', 
		'\x2', '\x41', '\x42', '\t', '\x2', '\x2', '\x2', '\x42', '\x43', '\a', 
		'\x4', '\x2', '\x2', '\x43', '\xF', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\a', '\x4', '\x2', '\x2', '\x45', '\x46', '\a', '\r', '\x2', 
		'\x2', '\x46', 'G', '\a', '\v', '\x2', '\x2', 'G', 'H', '\a', '\r', '\x2', 
		'\x2', 'H', 'I', '\a', '\x4', '\x2', '\x2', 'I', 'J', '\a', '\x4', '\x2', 
		'\x2', 'J', '\x11', '\x3', '\x2', '\x2', '\x2', '\b', '\x17', '\x1B', 
		'\x1E', '#', '&', '\x38',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
